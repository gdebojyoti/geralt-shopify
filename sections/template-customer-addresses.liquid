<div>
  <h1>My addresses</h1>

  <button>Create new address</button>
</div>

{% paginate customer.addresses by 10 %}
  <div class="flex">
    {% for address in customer.addresses %}
      <div class="border p-5 rounded-sm">
        {{ address | format_address }}

        {% if address == customer.default_address %}
          <b>Default</b>
        {% endif %}

        <button>Edit</button>
        <button>Delete</button>
      </div>
    {% endfor %}
  </div>

  {% render 'pagination', paginate: paginate %}
{% endpaginate %}

<div>
  <h2>New Address</h2>
  {% form 'customer_address', customer.new_address, class: 'flex flex-col' %}

  {{ form.errors | default_errors }}

  <div>
    <label for="first_name">First Name</label>
    <input class="border p-3" type="text" value="" name="address[first_name]" size="30" />
  </div>

  <div>
    <label for="last_name">Last Name</label>
    <input class="border p-3" type="text" value="" name="address[last_name]" size="30" />
  </div>

  <div>
    <label for="company">Company</label>
    <input class="border p-3" type="text" value="" name="address[company]" />
  </div>

  <div>
    <label for="address1">Address 1</label>
    <input class="border p-3" type="text" value="" name="address[address1]" />
  </div>

  <div>
    <label for="address2">Address 2</label>
    <input class="border p-3" type="text" value="" name="address[address2]" />
  </div>

  <div>
    <label for="city">City</label>
    <input class="border p-3" type="text" value="" name="address[city]" />
  </div>

  
  <div>
    <label for="country">Country</label>
    <select name="address[country]" data-country-selector data-form-id="{{ form.id }}">
      {{ all_country_option_tags }}
    </select>
  </div><!-- See docs for @shopify/theme-addresses to support Country and Province -->

  <div>
    <label for="province">Province</label>
    <select id="province-{{ form.id }}" name="address[province]"></select>
  </div>

  <div>
    <label for="zip">Zip/Post Code</label>
    <input class="border p-3" type="text" value="" name="address[zip]" />
  </div>

  <div>
    <label for="phone">Phone Number</label>
    <input class="border p-3" type="tel" value="" name="address[phone]" />
  </div>

  <button type="submit">Create address</button>
  <button type="reset">Reset</button>

  {% endform %}
</div>

<script>
  class CustomerAddress {
    constructor () {
      this.initialize()
      this.addressesSelector()
    }

    initialize () {
      const allAddressesSelector = document.querySelectorAll('select[data-country-selector]')
      if (!allAddressesSelector.length) {
        return
      }

      allAddressesSelector.forEach(select => {
        const selectedCountry = this.getSelectedCountry(select)
        if (!selectedCountry) {
          return
        }

        const provinces = JSON.parse(selectedCountry.dataset.provinces)

        const provinceSelector = document.querySelector(`#province-${select.dataset.formId}`)
        console.log("provinceSelector", provinceSelector)

        if (!provinces.length) {
          provinceSelector.setAttribute('disabled', 'disabled')
        } else {
          provinceSelector.removeAttribute('disabled')
        }

        provinceSelector.innerHTML = ''

        for (let index = 0; index < provinces.length; index++) {
          if (provinces[index][0] === provinceSelector.getAttribute('value')) {
            provinceSelector.innerHTML += `<option selected value="${provinces[index][0]}">${provinces[index][1]}</option>`
          } else {
            provinceSelector.innerHTML += `<option value="${provinces[index][0]}">${provinces[index][1]}</option>`
          }
        }
      })
    }

    getSelectedCountry (select) {
      let selectedOption
      for (let index = 0; index < select.options.length; index++) {
        const option = select.options[index];
        if (option.value === select.getAttribute('value')) {
          selectedOption = option
          selectedOption.setAttribute('selected', 'selected')
          break
        }
      }
      return selectedOption
    }

    addressesSelector () {
      const allAddressesSelector = document.querySelectorAll('select[data-country-selector]')
      if (!allAddressesSelector.length) {
        return
      }

      allAddressesSelector.forEach(select => {
        select.addEventListener('change', function (e) {
          const provinces = JSON.parse(this.options[this.selectedIndex].dataset.provinces)
          console.log("updated", provinces)
          const provinceSelector = document.querySelector(`#province-${this.dataset.formId}`)

          if (!provinces.length) {
            provinceSelector.setAttribute('disabled', 'disabled')
          } else {
            provinceSelector.removeAttribute('disabled')
          }

          provinceSelector.innerHTML = ''

          for (let index = 0; index < provinces.length; index++) {
            if (provinces[index][0] === provinceSelector.getAttribute('value')) {
              provinceSelector.innerHTML += `<option selected value="${provinces[index][0]}">${provinces[index][1]}</option>`
            } else {
              provinceSelector.innerHTML += `<option value="${provinces[index][0]}">${provinces[index][1]}</option>`
            }
          }
        })
      })
    }
  }

  const customerAddress = new CustomerAddress()
</script>